<?php
/**
 * Contains functions for basic MySQL tasks, such as SELECT, UPDATE, and
 * DELETE.
 *
 * PHP version 5.3.28
 *
 * @category Web_App
 * @package  Web_App
 * @author   Roy Vanegas <roy@thecodeeducators.com>
 * @license  https://gnu.org/licenses/gpl.html GNU General Public License
 * @link     https://bitbucket.org/code-warrior/web-app/
 */

/**
 * FIELD EXISTS IN COLUMN
 *
 * Looks for a $field_value to a $field in a $table, returning true if found, false
 * if not. For example, if a field called “name” with a value of “stairway
 * to heaven” existed in a table called “songs,” then
 *
 *    fieldExistsInColumn("stairway to heaven", "name", "songs")
 *
 * would return true.
 *
 * @param String $field_value The query I’m interested in finding.
 * @param String $field       The field in which I would like to locate $field_value.
 * @param String $table       The table containing the $field.
 *
 * @access public
 * @return Boolean return true upon finding a $field_value in the $field of $table.
 */
function fieldExistsInColumn($field_value, $field, $table)
{
    try {
        include_once "config.php";

        $db = new PDO(
            "mysql:host=".DBHOST."; dbname=".DBNAME.";charset=utf8", DBUSER, DBPASS,
            array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8")
        );

        $statement = $db -> prepare("SELECT $field FROM $table");
        $statement -> execute();

        $found = false;

        while (($row = $statement -> fetch())) {
            if ($field_value == $row[$field]) {
                $found = true;

                break;
            }
        }

        $statement = null;

        return $found;
    }
    catch(PDOException $e) {
        echo "Error message generated by function " .
            "<code>fieldExistsInColumn</code>: $e";

        exit;
    }
}

/**
 * SELECT
 *
 * Returns one $field_value — or the first, if more than one is retrieved — from
 * a MySQL table. For instance, you want the password field value from a table called
 * user where the username is “guitarist”:
 *
 * $password = select("password", "user", "username", "guitarist");
 *
 * @param String $field_value The field I want to retrieve
 * @param String $table       The table from which the field should come
 * @param String $query_field The field I want to match
 * @param String $query       The query that $query_field should match
 *
 * @access public
 * @return string on success or Boolean on failure.
 */
function select($field_value, $table, $query_field, $query)
{
    try {
        include_once "config.php";

        $db = new PDO("mysql:host=".DBHOST."; dbname=".DBNAME, DBUSER, DBPASS);

        $statement = $db -> prepare(
            "SELECT $field_value FROM $table WHERE $query_field = :q"
        );

        $statement -> execute(array('q' => $query));

        $row = $statement -> fetch();

        $statement = null;

        if ($row === false ) {
            $result = false;
        } else {
            $result = $row[$field_value];
        }

        return $result;
    }
    catch( PDOException $e ) {
        echo "Error message generated by function <code>select</code>: $e";

        exit;
    }
}

/**
 * UPDATE
 *
 * Updates one $field in a $table with a $new_field_value based on a match between
 * $field_of_interest_value and $field_of_interest. For example, if you wanted to
 * update the password of someone whose username is guitarist to a new password
 * “j1m1hendr1X”, you would use this function as follows:
 *
 * update("user", "password", "j1m1hendr1X", "username", "guitarist");
 *
 * @param String $table                   The table holding the field to update
 * @param String $field                   The field to set
 * @param String $new_field_value         The new data for the field to set
 * @param String $field_of_interest       The field I care to match
 * @param String $field_of_interest_value The data to the field I care to match
 *
 * @access public
 * @return none
 */
function update(
    $table,
    $field,
    $new_field_value,
    $field_of_interest,
    $field_of_interest_value
) {
    try {
        include_once "config.php";

        $db = new PDO("mysql:host=".DBHOST."; dbname=".DBNAME, DBUSER, DBPASS);

        $statement = $db -> prepare(
            "UPDATE $table " .
            "SET $field = :new_field_value " .
            "WHERE $field_of_interest = :field_of_interest_value"
        );

        $statement -> execute(
            array(
            'new_field_value' => $new_field_value,
            'field_of_interest_value' => $field_of_interest_value )
        );

        $statement = null;
    }
    catch(PDOException $e) {
        echo "Error message generated by function <code>update</code>: $e";

        exit;
    }
}

/**
 * DELETE
 *
 * Deletes an entry from a $table where a $query matches $field. For example, if I
 * wanted to delete a user whose username was “guitarist” from a table called
 * user, I would use this function as follows:
 *
 * delete("user", "username", "guitarist");
 *
 * @param String $table The table holding the query to delete
 * @param String $field The field whose query I want to match for deletion
 * @param String $query The entry I care to delete
 *
 * @access public
 * @return none
 */
function delete($table, $field, $query)
{
    try {
        include_once "config.php";

        $db = new PDO("mysql:host=".DBHOST."; dbname=".DBNAME, DBUSER, DBPASS);

        $statement = $db -> prepare("DELETE FROM $table WHERE $field = :query");

        $statement -> execute(array('query' => $query));

        $statement = null;
    }
    catch(PDOException $e) {
        echo "Error message generated by function <code>delete</code>: $e";

        exit;
    }
}
